{"files":[{"id":"aa36738c-66a6-4f80-a077-6f1667d9daca","name":"Code","type":"server_js","source":"/*\n  DELETE /knowledge/_query\n  {\n  \"query\": {\n  \"match_all\": {}\n  }\n  }\n  \n  DELETE /knowledge/_query?q\u003dsheet_id:\u003cid\u003e\n  */\nfunction deleteDataByQuery(index, type, query) {\n  var host \u003d getHostData();\n  isValidHost(host);\n  \n  var id \u003d SpreadsheetApp.getActiveSpreadsheet().getId();\n  \n  var resp \u003d deleteByQuery(host, index, id);\n  Logger.log(\"Resulto deleteDataByQuery: \");\n  Logger.log(resp);\n}\n\nfunction deleteByQuery(host, index, sheet_id) {\n   var url \u003d [(host.use_ssl) ? \u0027https://\u0027 : \u0027http://\u0027,\n              host.host,\u0027:\u0027, host.port,\u0027/\u0027, index, \"/_query?q\u003dsheet_id:\", sheet_id].join(\u0027\u0027);\n   \n  var options \u003d {\n    \"method\" : \"delete\",\n    \"contentType\" : \"application/json\"\n  };\n  \n  try {\n    var jsondata \u003d UrlFetchApp.fetch(url, options);   \n    return  JSON.parse(jsondata.getContentText());\n  } catch (e) {\n    Logger.log(e);\n    return null;\n  }\n}\n\n/*\n * This function sends request to architecture wallboard\n */\nfunction postArchboardEvent(session, index) {\n  \n  var userName \u003d Session.getEffectiveUser().getUsername();\n  var id \u003d SpreadsheetApp.getActiveSpreadsheet().getId();\n  \n  var data \u003d {\n    \"@timestamp\": new Date(),\n    \"sheet_id\" : id,\n    \"metric\" : index,\n    \"tower\": cleanUp(session.tower),\n    \"contract\": cleanUp(session.contract),    \n    \"flow\": cleanUp(session.flow),\n    \"update_by\": userName,\n    \"revision\" : 2,\n    \"event\": \"knowledgemap_updated\"\n  }\n  \n  var host \u003d getHostData();\n  isValidHost(host);\n  \n  indexES(host, \"archboard\", \"event\", data);\n}\n\n\n/*\n * This function sends project settings to tech gallery analytics \n */\nfunction putProjectSettings(session) {\n  \n  var userName \u003d Session.getEffectiveUser().getUsername();\n  var id \u003d SpreadsheetApp.getActiveSpreadsheet().getId();  \n  \n  var data \u003d {\n    \"@timestamp\": new Date(),\n    \"sheet_id\" : id,    \n    \"tower\": cleanUp(session.tower),\n    \"contract\": cleanUp(session.contract),     \n    \"flow\": cleanUp(session.flow),\n    \"architecture_owner\": session.owner,\n    \"update_by\": userName,\n    \"team\" :  session.team,\n    \"stack\": session.stack \n  }\n  \n  var host \u003d getHostData();\n  isValidHost(host);\n\n  indexES(host, \"project\", \"settings\", data, id);\n}\n\n\n/*\n * This function sends request to architecture wallboard\n */\nfunction indexES(host, index, type, data, id) {\n  \n  if (id !\u003d undefined) {\n    var url \u003d [(host.use_ssl) ? \u0027https://\u0027 : \u0027http://\u0027,\n               host.host,\u0027:\u0027, host.port,\u0027/\u0027, index, \"/\", type, \"/\", id].join(\u0027\u0027);\n  } else {\n    var url \u003d [(host.use_ssl) ? \u0027https://\u0027 : \u0027http://\u0027,\n               host.host,\u0027:\u0027, host.port,\u0027/\u0027, index, \"/\", type].join(\u0027\u0027);\n  }\n  \n  Logger.log(url);\n    \n  var payload \u003d JSON.stringify(data);\n\n  var options \u003d {\n        \"method\" : \"post\",\n        \"contentType\" : \"application/json\",\n        \"payload\" : payload\n  };\n\n  try {\n    var jsondata \u003d UrlFetchApp.fetch(url, options);   \n    var resp \u003d JSON.parse(jsondata.getContentText());\n    \n    Logger.log(resp)\n    \n    return resp;\n  } catch (e) {\n    Logger.log(e);\n    return null;\n  }\n}\n\n/**\n * Gets the default locations for headers and data, namely the first row\n * and all other rows.\n */\nfunction getDefaultRange(sheet) {\n  try {\n    var data_range \u003d sheet.getRange(1, 1, sheet.getLastRow(), sheet.getLastColumn());\n    return data_range.getA1Notation();\n  } catch(e) {\n    throw \"There is no data in the sheet.\";\n  }\n}\n\n/**\n * Pushes data from the spreadsheet to the cluster.\n *\n * @param {Object} host The set of parameters needed to connect to a cluster - required.\n * @param {String} index The index name - required.\n * @param {String} index_type The index type - required.\n * @param {String} template The name of the index template to use - optional.\n * @param {String} sheet The sheet that will be sent, with header and data row - required.\n * @param {String} doc_id_range_a1 The A1 notion of id range - optional.\n */\nfunction pushDataToCluster(index,index_type,template,sheet,doc_id_range_a1) { \n  var data_range_a1 \u003d getDefaultRange(sheet);  \n  \n  var host \u003d getHostData();\n  isValidHost(host);\n\n  if(!index) { throw \"Index name cannot be empty.\" }\n  if(index.indexOf(\u0027 \u0027)\u003e\u003d0) { throw \"Index should not have spaces.\" }\n\n  if(!index_type) { throw \"Index type cannot be empty.\" }\n  if(index_type.indexOf(\u0027 \u0027)\u003e\u003d0) { throw \"Index type should not have spaces.\" }\n\n  if(template \u0026\u0026 template.indexOf(\u0027 \u0027)\u003e\u003d0) { throw \"Template name should not have spaces.\" }\n\n  if(!data_range_a1) { throw \"Document data range cannot be empty.\" }\n\n\n  var data_range \u003d null;\n  try {\n    data_range \u003d sheet.getRange(data_range_a1);\n  } catch(e) {\n    throw \"The document data range entered was invalid. Please verify the range entered.\";\n  }\n  var data \u003d data_range.getValues();\n  if(data.length \u003c\u003d 0) {\n    throw \"No data to push.\"\n  }\n\n  var headers \u003d data.shift();\n  // ADD custom field sheet_id as column\n  headers.push(\u0027sheet_id\u0027)\n  for(var i in headers) {\n    if(!headers[i]) {\n      throw \u0027Document key name cannot be empty. Please make sure each cell in the document key names range has a value.\u0027;\n    }\n    headers[i] \u003d headers[i].replace(/[^0-9a-zA-Z]/g,\u0027_\u0027); // clean up the column names for index keys\n    headers[i] \u003d headers[i].toLowerCase();    \n    if(!headers[i]) {\n      throw \u0027Document key name cannot be empty. Please make sure each cell in the document key names range has a value.\u0027;\n    }\n  }\n\n  var doc_id_data \u003d null;\n  if(doc_id_range_a1) {\n    var doc_id_range \u003d null;\n    try {\n      doc_id_range \u003d sheet.getRange(doc_id_range_a1);\n    } catch(e) {\n      throw \"The document id column entered was invalid. Please verify the id column entered.\"\n    }\n    doc_id_range \u003d doc_id_range.offset(data_range.getRow(), 0,data_range.getHeight()-1);\n    doc_id_data \u003d doc_id_range.getValues();\n  }\n\n  var bulkList \u003d [];\n  if(template) { createTemplate(host,index,template); }\n  var did_send_some_data \u003d false;\n  for(var r\u003d0;r\u003cdata.length;r++) {\n    var row \u003d data[r];\n    // ADD custom field sheet ID as column    \n    if (row[0]) {\n      var sheet_id \u003d sheet.getParent().getId()\n      row.push(sheet_id);\n    }\n    var toInsert \u003d {};\n    for(var c\u003d0;c\u003crow.length;c++) {\n      if(row[c]) {\n        toInsert[headers[c]] \u003d row[c];\n      }\n    }\n    if(Object.keys(toInsert).length \u003e 0) {\n      if(doc_id_data) {\n        if(!doc_id_data[r][0]) {\n          throw \"Missing document id for data row: \"+(r+1);\n        }\n        bulkList.push(JSON.stringify({ \"update\" : { \"_index\" : index, \"_type\" : index_type, \"_id\" : cleanUp(doc_id_data[r][0]), \"_retry_on_conflict\" : 3 } }));\n        bulkList.push(JSON.stringify({ doc: toInsert, detect_noop: true, doc_as_upsert: true }));\n      } else {\n        bulkList.push(JSON.stringify({ \"index\" : { \"_index\" : index, \"_type\" : index_type } }));\n        bulkList.push(JSON.stringify(toInsert));\n      }\n      did_send_some_data \u003d true;\n      // Don\u0027t hit the UrlFetchApp limits of 10MB for POST calls.\n      if(bulkList.length \u003e\u003d 2000) {\n        postDataToES(host,bulkList.join(\"\\n\")+\"\\n\");\n        bulkList \u003d [];\n      }\n    }\n  }\n  if(bulkList.length \u003e 0) {\n    postDataToES(host,bulkList.join(\"\\n\")+\"\\n\");\n    did_send_some_data \u003d true;\n  }\n  if(!did_send_some_data) {\n    throw \"No data was sent to the cluster. Make sure your document key name and value ranges are valid.\";\n  }\n  return [(host.use_ssl) ? \u0027https://\u0027 : \u0027http://\u0027, host.host,\u0027:\u0027,host.port,\u0027/\u0027,index,\u0027/\u0027,index_type,\u0027/_search\u0027].join(\u0027\u0027);\n}\n\n/**\n * Creates a index template if required. If template already exists, it\n * does not update. If not, it uses default_template and the template name\n * to create a new one.\n *\n * @param {Object} host The set of parameters needed to connect to a cluster - required.\n * @param {String} index The index name - required.\n * @param {String} template_name The name of the index template to use - required.\n */\nfunction createTemplate(host,index,template_name) {\n  Logger.log(typeof host.use_ssl);\n  var url \u003d [(host.use_ssl) ? \u0027https://\u0027 : \u0027http://\u0027,\n             host.host,\u0027:\u0027,host.port,\n            \u0027/_template/\u0027,template_name].join(\u0027\u0027)\n  Logger.log(url);\n  var options \u003d getDefaultOptions(host.username,host.password);\n  options[\u0027muteHttpExceptions\u0027] \u003d true;\n  var resp \u003d null\n  try {\n    var resp \u003d UrlFetchApp.fetch(url, options);\n  } catch(e) {\n    throw \"There was an issue creating the template. Please check the names of the template or index and try again.\"\n  }\n  if(resp.getResponseCode() \u003d\u003d 404) {\n    options \u003d getDefaultOptions(host.username,host.password);\n    options.method \u003d \u0027POST\u0027;\n    default_template.template \u003d index;\n    options[\u0027payload\u0027] \u003d JSON.stringify(default_template);\n    options.headers[\"Content-Type\"] \u003d \"application/json\";\n    options[\u0027muteHttpExceptions\u0027] \u003d true;\n    resp \u003d null;\n    try {\n      resp \u003d UrlFetchApp.fetch(url, options);\n    } catch(e) {\n      throw \"There was an issue creating the template. Please check the names of the template or index and try again.\"\n    }\n    if(resp.getResponseCode() !\u003d 200) {\n      Logger.log(\"Index created.\");\n      var jsonData \u003d JSON.parse(resp.getContentText());\n      throw jsonData.message;\n    }\n  } else if(resp.getResponseCode() \u003d\u003d 200) {\n    var jsonResp \u003d JSON.parse(resp.getContentText());\n    if(jsonResp[template_name].template) {\n      var re \u003d new RegExp(jsonResp[template_name].template);\n      if(!re.test(index)) {\n        throw \"The template specified will only be applied to indices matching the following naming pattern: \u0027\"+jsonResp[template_name].template+\n              \"\u0027 Please update the template or choose a new name.\";\n      }\n    }\n  }\n}\n\n/**\n * Posts data to the ES cluster using the /_bulk endpoint\n *\n * @param {Object} host The set of parameters needed to connect to a cluster - required.\n * @param {Array} data The data to push in an array of JSON strings - required.\n */\nfunction postDataToES(host, data) {\n  var url \u003d [(host.use_ssl) ? \u0027https://\u0027 : \u0027http://\u0027,\n             host.host,\u0027:\u0027,host.port,\u0027/_bulk\u0027].join(\u0027\u0027);\n  var options \u003d getDefaultOptions(host.username,host.password);\n  options.method \u003d \u0027POST\u0027;\n  options[\u0027payload\u0027] \u003d data;\n  options.headers[\"Content-Type\"] \u003d \"application/json\";\n  options[\u0027muteHttpExceptions\u0027] \u003d true;\n  var resp \u003d null;\n  try {\n    resp \u003d UrlFetchApp.fetch(url, options);\n  } catch(e) {\n    throw \"There was an error sending data to the cluster. Please check your connection details and data.\"\n  }\n  // not work  if(resp.getResponseCode() !\u003d 200) {\n  var jsonData \u003d JSON.parse(resp.getContentText());\n  Logger.log(\"Response postDataToES\");\n  Logger.log(jsonData);\n  if(jsonData.error) {\n    throw jsonData.error;\n  }\n}\n\nfunction cleanUp(string) {\n  if (string !\u003d \"\") {\n    return string.replace(/[^0-9a-zA-Z]/g,\u0027_\u0027).toLowerCase();\n  } else {\n    return \"UNDEFINED_FLOW\";\n  }\n}\n\n/**\n * Helper function to get the default UrlFetchApp parameters\n *\n * @param {String} username The username for basic auth.\n * @param {String} password The password for basic auth.\n */\nfunction getDefaultOptions(username, password) {\n  var options \u003d {\n    method : \u0027GET\u0027,\n    headers : { },\n  }\n  if(username) {\n    options.headers[\"Authorization\"] \u003d \"Basic \" + Utilities.base64Encode(username + \":\" + password);\n  }\n  return options;\n}\n\n\nfunction getHostData() {\n  return {\n    host: \"104.197.92.45\",\n    port: 9200,\n    use_ssl: false,\n    username: \"witix\",\n    password: \"witix\"\n  };\n}\n\n/**\n * Helper function to validate the host object\n *\n * @param {Object} host The set of parameters needed to connect to a cluster - required.\n */\nfunction isValidHost(host) {\n  if(!host) {\n    throw \u0027Cluster details cannot be empty.\u0027;\n  }\n  if(!host.host || !host.port) {\n    throw \u0027Please enter your cluster host and port.\u0027;\n  }\n  if(host.host \u003d\u003d \u0027localhost\u0027 || host.host \u003d\u003d \u00270.0.0.0\u0027) {\n    throw \u0027Your cluster must be externally accessible to use this tool.\u0027;\n  }\n}\n\n\n\n\n/**\n * This is the default template to use. The template ke will\n * be relaced with the index name if required.\n *\n */\nvar default_template \u003d {\n      \"order\": 0,\n      \"template\": \"\",\n      \"settings\": {\n         \"index\": {\n            \"refresh_interval\": \"5s\",\n            \"analysis\": {\n               \"analyzer\": {\n                  \"default\": {\n                     \"type\": \"standard\",\n                     \"stopwords\": \"_none_\"\n                  }\n               }\n            },\n            \"number_of_shards\": \"1\",\n            \"number_of_replicas\": \"1\"\n         }\n      },\n      \"mappings\": {\n         \"_default_\": {\n            \"dynamic_templates\": [\n               {\n                  \"string_fields\": {\n                     \"mapping\": {\n                        \"fields\": {\n                           \"{name}\": {\n                              \"index\": \"analyzed\",\n                              \"omit_norms\": true,\n                              \"type\": \"string\"\n                           },\n                           \"raw\": {\n                              \"analyzer\": \"keyword\",\n                              \"ignore_above\": 256,\n                              \"index\": \"not_analyzed\",\n                              \"type\": \"string\"\n                           }\n                        },\n                        \"type\": \"multi_field\"\n                     },\n                     \"match_mapping_type\": \"string\",\n                     \"match\": \"*\"\n                  }\n               }\n            ],\n            \"_all\": {\n               \"enabled\": true\n            }\n         }\n      },\n      \"aliases\": {}\n};"},{"id":"ce59c46e-9e1b-4e55-b3cf-4a32160c7ead","name":"Utils","type":"server_js","source":"/*\n * Print log ui\n */\nfunction log(msg){\n  var ss \u003d SpreadsheetApp.getActiveSpreadsheet();\n  ss.toast(msg, \"Tech Gallery!\");\n}\n\n/**\n * Replace non ascii character to \"_\" from string parameter\n */\nfunction cleanUp(string) {\n  if (string !\u003d \"\") {\n    return string.replace(/[^0-9a-zA-Z]/g,\u0027_\u0027).toLowerCase();\n  } else {\n    return \"UNDEFINED_FLOW\";\n  }\n}\n\n/**\n * Apply trasponse function on array input\n */ \nfunction transpose(a) {\n  return a[0].map(function (_, c) { return a.map(function (r) { return r[c]; }); });\n}"}]}